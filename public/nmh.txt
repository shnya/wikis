= NMH (Nihongo Moji-code Hanbetsu) Library =
== 紹介 ==
日本語の文字コードを判別するためのライブラリです。<<BR>>
現在、UTF-8, EUC-JP, ISO-2022-JP, Shift_JISに対応しています。
また、BOMありのUTF-16, UTF-32も判別可能です。

文字コードを変換するだけであれば準標準ライブラリと言えるiconvが利用できるのですが、文字コードの判別は [[http://sourceforge.jp/projects/nkf/|nkf]] , [[http://site.icu-project.org/|ICU]] , [[http://tricklib.com/cxx/ex/babel/|BABEL]] といった追加ライブラリの導入が必要でした。

そういうライブラリを入れるまでもない、お手軽に文字コードの判別ができるように、という思いから作ってみました。

== 変更履歴 ==
 * [[http://shnya.jp/public/nmh-0.0.3.tar.gz|version 0.0.3]]
  * 不要なコメントを削除
 * [[http://shnya.jp/public/nmh-0.0.2.tar.gz|version 0.0.2]]
  * UTF-16, UTF-32に対応
 * [[http://shnya.jp/public/nmh-0.0.1.tar.gz|version 0.0.1]]
  * first release

== インストール ==
1. ソースコードをダウンロード
 [[https://github.com/shnya/nmh|github]]もしくは[[http://shnya.jp/public/nmh-0.0.2.tar.gz|こちら]]からダウンロードが可能です。
{{{
  $ git clone https://github.com/shnya/nmh.git
or
  $ wget http://shnya.jp/public/nmh-0.0.2.tar.gz
  $ tar zxf nmh-0.0.2.tar.gz
}}}
2. コンパイル
{{{
  $ make
}}}
3. インストール
{{{
  $ make install
}}}

== 使い方 ==
=== ヘッダーファイル ===
 * nmh.h (C用ヘッダファイル)
  * リンク時には-lnmhオプションの追加が必要です
 * nmh.hpp (C++用ヘッダファイル, ライブラリとのリンクは必要ありません)

=== API ===
 * コード判別
{{{
  enum NMH_CHAR_CODE nmh_code_detect(const char *str, int size);

   引数:   str  判定して欲しい入力文字列
           size ヌル文字を除いた入力文字列の文字数(strlen(str)と同じ)
   戻り値: 以下のNMH_CHAR_CODEのいずれかを返す。
           順番に(ISO-2022-JP, UTF8N, UTF8, SJIS, EUC, ASCII)となり、
           判別不可能な場合、NMH_CHAR_CODE_UNKNOWNを返す。

  enum NMH_CHAR_CODE {
    NMH_CHAR_CODE_JIS = 0,
    NMH_CHAR_CODE_UTF8 = 1,
    NMH_CHAR_CODE_UTF8N = 2,
    NMH_CHAR_CODE_UTF16BE = 3,
    NMH_CHAR_CODE_UTF16LE = 4,
    NMH_CHAR_CODE_UTF32BE = 5,
    NMH_CHAR_CODE_UTF32LE = 6,
    NMH_CHAR_CODE_SJIS = 7,
    NMH_CHAR_CODE_EUC = 8,
    NMH_CHAR_CODE_ASCII = 9,
    NMH_CHAR_CODE_UNKNOWN = 10
  };
}}}
 * JISかどうかの判別
{{{
  float nmh_is_jis(const unsigned char *str, int size);

   引数:   str  判定して欲しい入力文字列
           size ヌル文字を除いた入力文字列の文字数(strlen(str)と同じ)
   戻り値: 0以上であればJISの可能性が高く、0以下であればJISの可能性が低い。
}}}
 * utf8nかどうかの判別
{{{
  float nmh_is_utf8n(const unsigned char *str, int size);

   引数:   str  判定して欲しい入力文字列
           size ヌル文字を除いた入力文字列の文字数(strlen(str)と同じ)
   戻り値: 0以上であればutf8nの可能性が高く、0以下であればutf8nの可能性が低い。
}}}
 * utf8かどうかの判別
{{{
  float nmh_is_utf8(const unsigned char *str, int size);

   引数:   str  判定して欲しい入力文字列
           size ヌル文字を除いた入力文字列の文字数(strlen(str)と同じ)
   戻り値: 0以上であればutf8の可能性が高く、0以下であればutf8の可能性が低い。
          さらに1以上であればutf8nである。
}}}
 * utf16かどうかの判別
{{{
  float nmh_is_utf16(const unsigned char *str, int size);
   引数:   str  判定して欲しい入力文字列
           size ヌル文字を除いた入力文字列の文字数(strlen(str)と同じ)
   戻り値: 0以上であればutf16の可能性が高く、0以下であればutf16の可能性が低い。
          さらに1以上であればutf16beである。
}}}
 * utf32かどうかの判別
{{{
  float nmh_is_utf32(const unsigned char *str, int size);
   引数:   str  判定して欲しい入力文字列
           size ヌル文字を除いた入力文字列の文字数(strlen(str)と同じ)
   戻り値: 0以上であればutf32の可能性が高く、0以下であればutf32の可能性が低い。
          さらに1以上であればutf32beである。
}}}
 * asciiかどうかの判別
{{{
  float nmh_is_ascii(const unsigned char *str, int size);

   引数:   str  判定して欲しい入力文字列
           size ヌル文字を除いた入力文字列の文字数(strlen(str)と同じ)
   戻り値: 0以上であればasciiの可能性が高く、0以下であればasciiの可能性が低い。
}}}
 * eucかどうかの判別
{{{
  float nmh_is_euc(const unsigned char *str, int size);

   引数:   str  判定して欲しい入力文字列
           size ヌル文字を除いた入力文字列の文字数(strlen(str)と同じ)
   戻り値: 0以上であればeucの可能性が高く、0以下であればeucの可能性が低い。
}}}
 * sjisかどうかの判別
{{{
  float nmh_is_sjis(const unsigned char *str, int size);

   引数:   str  判定して欲しい入力文字列
           size ヌル文字を除いた入力文字列の文字数(strlen(str)と同じ)
   戻り値: 0以上であればsjisの可能性が高く、0以下であればsjisの可能性が低い。
}}}

=== サンプルコード ===
{{{#!highlight c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nmh.h"

const char *codes[] = {
    "JIS",
    "UTF8",
    "UTF8N",
    "UTF16BE",
    "UTF16LE",
    "UTF32BE",
    "UTF32LE",
    "SJIS",
    "EUC",
    "ASCII",
    "UNKNOWN"
};

int main(int argc, char *argv[])
{
  FILE *fp;
  char buf[1024];
  if((fp = fopen("test.txt", "r")) == NULL){
    perror("open error");
    exit(EXIT_FAILURE);
  }
  if(fgets(buf, 1024, fp) != NULL){
    enum NMH_CHAR_CODE n = nmh_code_detect(buf, strlen(buf));
    printf("%s\n", codes[n]);
  }
  fclose(fp);
  return 0;
}
}}}

== ライセンス ==
このソフトウェアはパブリックドメインで提供しています。<<BR>>
自己責任でご利用ください。

== 謝辞 ==
実装にあたっては、雅階凡さんの [[http://www.geocities.jp/gakaibon/tips/csharp2008/charset-check.html|文字コードの判定]] を参考にさせて頂きました。<<BR>>
また、EUCとSJISの判別については、shiroさんの [[http://practical-scheme.net/gauche/|Gauche]] において実装されている文字エンコーディング自動判定関数のアイディア(文字の出現頻度を考慮してスコア付けする方法)を利用させて頂きました。<<BR>>
この場にて深く感謝の意を表します。

ソースコードは私独自で作成したものであるため、私の判断によりパブリックドメインで提供しておりますが、何か問題がありましたら、ご連絡頂けると助かります。

== 連絡先 ==
testmhigashi `at` gmail.com

